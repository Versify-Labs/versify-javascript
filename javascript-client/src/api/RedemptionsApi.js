/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiDeleteResponse from '../model/ApiDeleteResponse';
import ApiListResponse from '../model/ApiListResponse';
import ApiSearchResponse from '../model/ApiSearchResponse';
import Asset10 from '../model/Asset10';
import Contact10 from '../model/Contact10';
import HTTPValidationError from '../model/HTTPValidationError';
import Redemption from '../model/Redemption';
import SearchContacts from '../model/SearchContacts';

/**
* Redemptions service.
* @module api/RedemptionsApi
* @version 1.0.0
*/
export default class RedemptionsApi {

    /**
    * Constructs a new RedemptionsApi. 
    * @alias module:api/RedemptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRedemptionV2RedemptionsPost operation.
     * @callback module:api/RedemptionsApi~createRedemptionV2RedemptionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Redemption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create redemption
     * Create a redemption
     * @param {module:model/Asset10} asset10 
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~createRedemptionV2RedemptionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redemption}
     */
    createRedemptionV2RedemptionsPost(asset10, opts, callback) {
      opts = opts || {};
      let postBody = asset10;
      // verify the required parameter 'asset10' is set
      if (asset10 === undefined || asset10 === null) {
        throw new Error("Missing the required parameter 'asset10' when calling createRedemptionV2RedemptionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Redemption;
      return this.apiClient.callApi(
        '/v2/redemptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRedemptionV2RedemptionsPost_0 operation.
     * @callback module:api/RedemptionsApi~createRedemptionV2RedemptionsPost_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Redemption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create redemption
     * Create a redemption
     * @param {module:model/Asset10} asset10 
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~createRedemptionV2RedemptionsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redemption}
     */
    createRedemptionV2RedemptionsPost_0(asset10, opts, callback) {
      opts = opts || {};
      let postBody = asset10;
      // verify the required parameter 'asset10' is set
      if (asset10 === undefined || asset10 === null) {
        throw new Error("Missing the required parameter 'asset10' when calling createRedemptionV2RedemptionsPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Redemption;
      return this.apiClient.callApi(
        '/v2/redemptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRedemptionV2RedemptionsRedemptionIdDelete operation.
     * @callback module:api/RedemptionsApi~deleteRedemptionV2RedemptionsRedemptionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete redemption
     * Delete an redemption
     * @param {String} redemptionId Unique identifier of the contact
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~deleteRedemptionV2RedemptionsRedemptionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeleteResponse}
     */
    deleteRedemptionV2RedemptionsRedemptionIdDelete(redemptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'redemptionId' is set
      if (redemptionId === undefined || redemptionId === null) {
        throw new Error("Missing the required parameter 'redemptionId' when calling deleteRedemptionV2RedemptionsRedemptionIdDelete");
      }

      let pathParams = {
        'redemption_id': redemptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiDeleteResponse;
      return this.apiClient.callApi(
        '/v2/redemptions/{redemption_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRedemptionV2RedemptionsRedemptionIdDelete_0 operation.
     * @callback module:api/RedemptionsApi~deleteRedemptionV2RedemptionsRedemptionIdDelete_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete redemption
     * Delete an redemption
     * @param {String} redemptionId Unique identifier of the contact
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~deleteRedemptionV2RedemptionsRedemptionIdDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeleteResponse}
     */
    deleteRedemptionV2RedemptionsRedemptionIdDelete_0(redemptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'redemptionId' is set
      if (redemptionId === undefined || redemptionId === null) {
        throw new Error("Missing the required parameter 'redemptionId' when calling deleteRedemptionV2RedemptionsRedemptionIdDelete_0");
      }

      let pathParams = {
        'redemption_id': redemptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiDeleteResponse;
      return this.apiClient.callApi(
        '/v2/redemptions/{redemption_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRedemptionV2RedemptionsRedemptionIdGet operation.
     * @callback module:api/RedemptionsApi~getRedemptionV2RedemptionsRedemptionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Redemption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get redemption
     * Get a redemption
     * @param {String} redemptionId Unique identifier of the contact
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~getRedemptionV2RedemptionsRedemptionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redemption}
     */
    getRedemptionV2RedemptionsRedemptionIdGet(redemptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'redemptionId' is set
      if (redemptionId === undefined || redemptionId === null) {
        throw new Error("Missing the required parameter 'redemptionId' when calling getRedemptionV2RedemptionsRedemptionIdGet");
      }

      let pathParams = {
        'redemption_id': redemptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Redemption;
      return this.apiClient.callApi(
        '/v2/redemptions/{redemption_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRedemptionV2RedemptionsRedemptionIdGet_0 operation.
     * @callback module:api/RedemptionsApi~getRedemptionV2RedemptionsRedemptionIdGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Redemption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get redemption
     * Get a redemption
     * @param {String} redemptionId Unique identifier of the contact
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~getRedemptionV2RedemptionsRedemptionIdGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redemption}
     */
    getRedemptionV2RedemptionsRedemptionIdGet_0(redemptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'redemptionId' is set
      if (redemptionId === undefined || redemptionId === null) {
        throw new Error("Missing the required parameter 'redemptionId' when calling getRedemptionV2RedemptionsRedemptionIdGet_0");
      }

      let pathParams = {
        'redemption_id': redemptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Redemption;
      return this.apiClient.callApi(
        '/v2/redemptions/{redemption_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRedemptionsV2RedemptionsGet operation.
     * @callback module:api/RedemptionsApi~listRedemptionsV2RedemptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List redemptions
     * List redemptions with optional filters and pagination parameters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNum Page number (default to 1)
     * @param {Number} opts.pageSize Page size (default to 10)
     * @param {String} opts.collection Collection ID
     * @param {String} opts.status Collection status
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~listRedemptionsV2RedemptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponse}
     */
    listRedemptionsV2RedemptionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_num': opts['pageNum'],
        'page_size': opts['pageSize'],
        'collection': opts['collection'],
        'status': opts['status']
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponse;
      return this.apiClient.callApi(
        '/v2/redemptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRedemptionsV2RedemptionsGet_0 operation.
     * @callback module:api/RedemptionsApi~listRedemptionsV2RedemptionsGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List redemptions
     * List redemptions with optional filters and pagination parameters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNum Page number (default to 1)
     * @param {Number} opts.pageSize Page size (default to 10)
     * @param {String} opts.collection Collection ID
     * @param {String} opts.status Collection status
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~listRedemptionsV2RedemptionsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponse}
     */
    listRedemptionsV2RedemptionsGet_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_num': opts['pageNum'],
        'page_size': opts['pageSize'],
        'collection': opts['collection'],
        'status': opts['status']
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponse;
      return this.apiClient.callApi(
        '/v2/redemptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRedemptionsV2RedemptionsSearchPost operation.
     * @callback module:api/RedemptionsApi~searchRedemptionsV2RedemptionsSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search redemptions
     * Search redemptions with query string
     * @param {module:model/SearchContacts} searchContacts 
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~searchRedemptionsV2RedemptionsSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSearchResponse}
     */
    searchRedemptionsV2RedemptionsSearchPost(searchContacts, opts, callback) {
      opts = opts || {};
      let postBody = searchContacts;
      // verify the required parameter 'searchContacts' is set
      if (searchContacts === undefined || searchContacts === null) {
        throw new Error("Missing the required parameter 'searchContacts' when calling searchRedemptionsV2RedemptionsSearchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiSearchResponse;
      return this.apiClient.callApi(
        '/v2/redemptions/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRedemptionsV2RedemptionsSearchPost_0 operation.
     * @callback module:api/RedemptionsApi~searchRedemptionsV2RedemptionsSearchPost_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search redemptions
     * Search redemptions with query string
     * @param {module:model/SearchContacts} searchContacts 
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~searchRedemptionsV2RedemptionsSearchPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSearchResponse}
     */
    searchRedemptionsV2RedemptionsSearchPost_0(searchContacts, opts, callback) {
      opts = opts || {};
      let postBody = searchContacts;
      // verify the required parameter 'searchContacts' is set
      if (searchContacts === undefined || searchContacts === null) {
        throw new Error("Missing the required parameter 'searchContacts' when calling searchRedemptionsV2RedemptionsSearchPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiSearchResponse;
      return this.apiClient.callApi(
        '/v2/redemptions/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRedemptionV2RedemptionsRedemptionIdPut operation.
     * @callback module:api/RedemptionsApi~updateRedemptionV2RedemptionsRedemptionIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Redemption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update redemption
     * Update an redemption
     * @param {String} redemptionId Unique identifier of the contact
     * @param {module:model/Contact10} contact10 
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~updateRedemptionV2RedemptionsRedemptionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redemption}
     */
    updateRedemptionV2RedemptionsRedemptionIdPut(redemptionId, contact10, opts, callback) {
      opts = opts || {};
      let postBody = contact10;
      // verify the required parameter 'redemptionId' is set
      if (redemptionId === undefined || redemptionId === null) {
        throw new Error("Missing the required parameter 'redemptionId' when calling updateRedemptionV2RedemptionsRedemptionIdPut");
      }
      // verify the required parameter 'contact10' is set
      if (contact10 === undefined || contact10 === null) {
        throw new Error("Missing the required parameter 'contact10' when calling updateRedemptionV2RedemptionsRedemptionIdPut");
      }

      let pathParams = {
        'redemption_id': redemptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Redemption;
      return this.apiClient.callApi(
        '/v2/redemptions/{redemption_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRedemptionV2RedemptionsRedemptionIdPut_0 operation.
     * @callback module:api/RedemptionsApi~updateRedemptionV2RedemptionsRedemptionIdPut_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Redemption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update redemption
     * Update an redemption
     * @param {String} redemptionId Unique identifier of the contact
     * @param {module:model/Contact10} contact10 
     * @param {Object} opts Optional parameters
     * @param {String} opts.versifyAccount Versify Account ID
     * @param {module:api/RedemptionsApi~updateRedemptionV2RedemptionsRedemptionIdPut_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Redemption}
     */
    updateRedemptionV2RedemptionsRedemptionIdPut_0(redemptionId, contact10, opts, callback) {
      opts = opts || {};
      let postBody = contact10;
      // verify the required parameter 'redemptionId' is set
      if (redemptionId === undefined || redemptionId === null) {
        throw new Error("Missing the required parameter 'redemptionId' when calling updateRedemptionV2RedemptionsRedemptionIdPut_0");
      }
      // verify the required parameter 'contact10' is set
      if (contact10 === undefined || contact10 === null) {
        throw new Error("Missing the required parameter 'contact10' when calling updateRedemptionV2RedemptionsRedemptionIdPut_0");
      }

      let pathParams = {
        'redemption_id': redemptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Versify-Account': opts['versifyAccount']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Redemption;
      return this.apiClient.callApi(
        '/v2/redemptions/{redemption_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
