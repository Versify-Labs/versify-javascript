/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MintStatus from './MintStatus';

/**
 * The Mint model module.
 * @module model/Mint
 * @version 1.0.0
 */
class Mint {
    /**
     * Constructs a new <code>Mint</code>.
     * A mint document in the database.
     * @alias module:model/Mint
     * @param account {String} The account the mint belongs to
     * @param asset {String} The asset the mint is for
     */
    constructor(account, asset) { 
        
        Mint.initialize(this, account, asset);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, asset) { 
        obj['account'] = account;
        obj['asset'] = asset;
    }

    /**
     * Constructs a <code>Mint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mint} obj Optional instance to populate.
     * @return {module:model/Mint} The populated <code>Mint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mint();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('asset')) {
                obj['asset'] = ApiClient.convertToType(data['asset'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('journey')) {
                obj['journey'] = ApiClient.convertToType(data['journey'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('run')) {
                obj['run'] = ApiClient.convertToType(data['run'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], MintStatus);
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
            if (data.hasOwnProperty('wallet_address')) {
                obj['wallet_address'] = ApiClient.convertToType(data['wallet_address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Mint.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['asset'] && !(typeof data['asset'] === 'string' || data['asset'] instanceof String)) {
            throw new Error("Expected the field `asset` to be a primitive type in the JSON string but got " + data['asset']);
        }
        // ensure the json data is a string
        if (data['contact'] && !(typeof data['contact'] === 'string' || data['contact'] instanceof String)) {
            throw new Error("Expected the field `contact` to be a primitive type in the JSON string but got " + data['contact']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['journey'] && !(typeof data['journey'] === 'string' || data['journey'] instanceof String)) {
            throw new Error("Expected the field `journey` to be a primitive type in the JSON string but got " + data['journey']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['run'] && !(typeof data['run'] === 'string' || data['run'] instanceof String)) {
            throw new Error("Expected the field `run` to be a primitive type in the JSON string but got " + data['run']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          MintStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['transaction'] && !(typeof data['transaction'] === 'string' || data['transaction'] instanceof String)) {
            throw new Error("Expected the field `transaction` to be a primitive type in the JSON string but got " + data['transaction']);
        }
        // ensure the json data is a string
        if (data['wallet_address'] && !(typeof data['wallet_address'] === 'string' || data['wallet_address'] instanceof String)) {
            throw new Error("Expected the field `wallet_address` to be a primitive type in the JSON string but got " + data['wallet_address']);
        }

        return true;
    }


}

Mint.RequiredProperties = ["account", "asset"];

/**
 * Unique identifier for the mint
 * @member {String} _id
 */
Mint.prototype['_id'] = undefined;

/**
 * The account the mint belongs to
 * @member {String} account
 */
Mint.prototype['account'] = undefined;

/**
 * The asset the mint is for
 * @member {String} asset
 */
Mint.prototype['asset'] = undefined;

/**
 * The contact the mint is for
 * @member {String} contact
 */
Mint.prototype['contact'] = undefined;

/**
 * The timestamp when the event was created
 * @member {Number} created
 */
Mint.prototype['created'] = undefined;

/**
 * The email address of the contact the mint is for.
 * @member {String} email
 */
Mint.prototype['email'] = undefined;

/**
 * The ID of the journey the mint is for.
 * @member {String} journey
 */
Mint.prototype['journey'] = undefined;

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Mint.prototype['metadata'] = undefined;

/**
 * The object type. Always \"mint\"
 * @member {String} object
 * @default 'mint'
 */
Mint.prototype['object'] = 'mint';

/**
 * The quantity of the asset being minted
 * @member {Number} quantity
 * @default 1
 */
Mint.prototype['quantity'] = 1;

/**
 * The journey run the mint is for
 * @member {String} run
 */
Mint.prototype['run'] = undefined;

/**
 * The signature for the mint
 * @member {String} signature
 */
Mint.prototype['signature'] = undefined;

/**
 * The status of the mint
 * @member {module:model/MintStatus} status
 */
Mint.prototype['status'] = undefined;

/**
 * The transaction the mint is for
 * @member {String} transaction
 */
Mint.prototype['transaction'] = undefined;

/**
 * The timestamp when the event was last updated
 * @member {Number} updated
 */
Mint.prototype['updated'] = undefined;

/**
 * The wallet address the mint is for
 * @member {String} wallet_address
 */
Mint.prototype['wallet_address'] = undefined;






export default Mint;

