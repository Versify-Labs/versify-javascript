/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Webhook model module.
 * @module model/Webhook
 * @version 1.0.0
 */
class Webhook {
    /**
     * Constructs a new <code>Webhook</code>.
     * A webhook document in the database.
     * @alias module:model/Webhook
     * @param account {String} The account the webhook belongs to
     * @param url {String} The URL that will receive the webhook
     */
    constructor(account, url) { 
        
        Webhook.initialize(this, account, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, url) { 
        obj['account'] = account;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Webhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webhook} obj Optional instance to populate.
     * @return {module:model/Webhook} The populated <code>Webhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webhook();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled_events')) {
                obj['enabled_events'] = ApiClient.convertToType(data['enabled_events'], [Object]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Webhook.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enabled_events'])) {
            throw new Error("Expected the field `enabled_events` to be an array in the JSON data but got " + data['enabled_events']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Webhook.RequiredProperties = ["account", "url"];

/**
 * Unique identifier for the webhook
 * @member {String} _id
 */
Webhook.prototype['_id'] = undefined;

/**
 * The account the webhook belongs to
 * @member {String} account
 */
Webhook.prototype['account'] = undefined;

/**
 * Whether the webhook is active
 * @member {Boolean} active
 * @default true
 */
Webhook.prototype['active'] = true;

/**
 * The timestamp when the event was created
 * @member {Number} created
 */
Webhook.prototype['created'] = undefined;

/**
 * A description of the webhook
 * @member {String} description
 */
Webhook.prototype['description'] = undefined;

/**
 * The events that will trigger the webhook
 * @member {Array.<Object>} enabled_events
 */
Webhook.prototype['enabled_events'] = undefined;

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Webhook.prototype['metadata'] = undefined;

/**
 * The object type
 * @member {String} object
 * @default 'webhook'
 */
Webhook.prototype['object'] = 'webhook';

/**
 * The timestamp when the event was last updated
 * @member {Number} updated
 */
Webhook.prototype['updated'] = undefined;

/**
 * The URL that will receive the webhook
 * @member {String} url
 */
Webhook.prototype['url'] = undefined;






export default Webhook;

