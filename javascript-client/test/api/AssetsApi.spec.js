/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VersifyClient);
  }
}(this, function(expect, VersifyClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VersifyClient.AssetsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AssetsApi', function() {
    describe('createAssetV2AssetsPost', function() {
      it('should call createAssetV2AssetsPost successfully', function(done) {
        //uncomment below and update the code to test createAssetV2AssetsPost
        //instance.createAssetV2AssetsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAssetV2AssetsPost_0', function() {
      it('should call createAssetV2AssetsPost_0 successfully', function(done) {
        //uncomment below and update the code to test createAssetV2AssetsPost_0
        //instance.createAssetV2AssetsPost_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAssetV2AssetsAssetIdDelete', function() {
      it('should call deleteAssetV2AssetsAssetIdDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAssetV2AssetsAssetIdDelete
        //instance.deleteAssetV2AssetsAssetIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAssetV2AssetsAssetIdDelete_0', function() {
      it('should call deleteAssetV2AssetsAssetIdDelete_0 successfully', function(done) {
        //uncomment below and update the code to test deleteAssetV2AssetsAssetIdDelete_0
        //instance.deleteAssetV2AssetsAssetIdDelete_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAssetV2AssetsAssetIdGet', function() {
      it('should call getAssetV2AssetsAssetIdGet successfully', function(done) {
        //uncomment below and update the code to test getAssetV2AssetsAssetIdGet
        //instance.getAssetV2AssetsAssetIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAssetV2AssetsAssetIdGet_0', function() {
      it('should call getAssetV2AssetsAssetIdGet_0 successfully', function(done) {
        //uncomment below and update the code to test getAssetV2AssetsAssetIdGet_0
        //instance.getAssetV2AssetsAssetIdGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAssetsV2AssetsGet', function() {
      it('should call listAssetsV2AssetsGet successfully', function(done) {
        //uncomment below and update the code to test listAssetsV2AssetsGet
        //instance.listAssetsV2AssetsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAssetsV2AssetsGet_0', function() {
      it('should call listAssetsV2AssetsGet_0 successfully', function(done) {
        //uncomment below and update the code to test listAssetsV2AssetsGet_0
        //instance.listAssetsV2AssetsGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchAssetsV2AssetsSearchPost', function() {
      it('should call searchAssetsV2AssetsSearchPost successfully', function(done) {
        //uncomment below and update the code to test searchAssetsV2AssetsSearchPost
        //instance.searchAssetsV2AssetsSearchPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchAssetsV2AssetsSearchPost_0', function() {
      it('should call searchAssetsV2AssetsSearchPost_0 successfully', function(done) {
        //uncomment below and update the code to test searchAssetsV2AssetsSearchPost_0
        //instance.searchAssetsV2AssetsSearchPost_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAssetV2AssetsAssetIdPut', function() {
      it('should call updateAssetV2AssetsAssetIdPut successfully', function(done) {
        //uncomment below and update the code to test updateAssetV2AssetsAssetIdPut
        //instance.updateAssetV2AssetsAssetIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAssetV2AssetsAssetIdPut_0', function() {
      it('should call updateAssetV2AssetsAssetIdPut_0 successfully', function(done) {
        //uncomment below and update the code to test updateAssetV2AssetsAssetIdPut_0
        //instance.updateAssetV2AssetsAssetIdPut_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
