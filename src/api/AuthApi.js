/**
 * Versify API
 * Versify API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BodyAccessTokenV2OauthAccessTokenPost from '../model/BodyAccessTokenV2OauthAccessTokenPost';
import BodyAuthenticateV2AuthAuthenticatePost from '../model/BodyAuthenticateV2AuthAuthenticatePost';
import HTTPValidationError from '../model/HTTPValidationError';
import User from '../model/User';
import User1 from '../model/User1';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accessTokenV2OauthAccessTokenPost operation.
     * @callback module:api/AuthApi~accessTokenV2OauthAccessTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access Token
     * @param {module:model/BodyAccessTokenV2OauthAccessTokenPost} bodyAccessTokenV2OauthAccessTokenPost 
     * @param {module:api/AuthApi~accessTokenV2OauthAccessTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    accessTokenV2OauthAccessTokenPost(bodyAccessTokenV2OauthAccessTokenPost, callback) {
      let postBody = bodyAccessTokenV2OauthAccessTokenPost;
      // verify the required parameter 'bodyAccessTokenV2OauthAccessTokenPost' is set
      if (bodyAccessTokenV2OauthAccessTokenPost === undefined || bodyAccessTokenV2OauthAccessTokenPost === null) {
        throw new Error("Missing the required parameter 'bodyAccessTokenV2OauthAccessTokenPost' when calling accessTokenV2OauthAccessTokenPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/oauth/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessTokenV2OauthAccessTokenPost_0 operation.
     * @callback module:api/AuthApi~accessTokenV2OauthAccessTokenPost_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Access Token
     * @param {module:model/BodyAccessTokenV2OauthAccessTokenPost} bodyAccessTokenV2OauthAccessTokenPost 
     * @param {module:api/AuthApi~accessTokenV2OauthAccessTokenPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    accessTokenV2OauthAccessTokenPost_0(bodyAccessTokenV2OauthAccessTokenPost, callback) {
      let postBody = bodyAccessTokenV2OauthAccessTokenPost;
      // verify the required parameter 'bodyAccessTokenV2OauthAccessTokenPost' is set
      if (bodyAccessTokenV2OauthAccessTokenPost === undefined || bodyAccessTokenV2OauthAccessTokenPost === null) {
        throw new Error("Missing the required parameter 'bodyAccessTokenV2OauthAccessTokenPost' when calling accessTokenV2OauthAccessTokenPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/oauth/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateV2AuthAuthenticatePost operation.
     * @callback module:api/AuthApi~authenticateV2AuthAuthenticatePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate
     * Authenticate with a one-time passcode.
     * @param {module:model/BodyAuthenticateV2AuthAuthenticatePost} bodyAuthenticateV2AuthAuthenticatePost 
     * @param {module:api/AuthApi~authenticateV2AuthAuthenticatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    authenticateV2AuthAuthenticatePost(bodyAuthenticateV2AuthAuthenticatePost, callback) {
      let postBody = bodyAuthenticateV2AuthAuthenticatePost;
      // verify the required parameter 'bodyAuthenticateV2AuthAuthenticatePost' is set
      if (bodyAuthenticateV2AuthAuthenticatePost === undefined || bodyAuthenticateV2AuthAuthenticatePost === null) {
        throw new Error("Missing the required parameter 'bodyAuthenticateV2AuthAuthenticatePost' when calling authenticateV2AuthAuthenticatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/auth/authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateV2AuthAuthenticatePost_0 operation.
     * @callback module:api/AuthApi~authenticateV2AuthAuthenticatePost_0Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate
     * Authenticate with a one-time passcode.
     * @param {module:model/BodyAuthenticateV2AuthAuthenticatePost} bodyAuthenticateV2AuthAuthenticatePost 
     * @param {module:api/AuthApi~authenticateV2AuthAuthenticatePost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    authenticateV2AuthAuthenticatePost_0(bodyAuthenticateV2AuthAuthenticatePost, callback) {
      let postBody = bodyAuthenticateV2AuthAuthenticatePost;
      // verify the required parameter 'bodyAuthenticateV2AuthAuthenticatePost' is set
      if (bodyAuthenticateV2AuthAuthenticatePost === undefined || bodyAuthenticateV2AuthAuthenticatePost === null) {
        throw new Error("Missing the required parameter 'bodyAuthenticateV2AuthAuthenticatePost' when calling authenticateV2AuthAuthenticatePost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/auth/authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizeV2OauthAuthorizeGet operation.
     * @callback module:api/AuthApi~authorizeV2OauthAuthorizeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize
     * Authorize an email address to use for authentication.
     * @param {String} clientId The client ID to use for authentication.
     * @param {String} redirectUri The redirect URI to use for authentication.
     * @param {Object} opts Optional parameters
     * @param {String} opts.responseType The type of response to return. (default to 'code')
     * @param {String} opts.scope The scope to use for authentication. (default to 'read_write')
     * @param {String} opts.state The state to use for authentication. (default to '')
     * @param {module:api/AuthApi~authorizeV2OauthAuthorizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    authorizeV2OauthAuthorizeGet(clientId, redirectUri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorizeV2OauthAuthorizeGet");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorizeV2OauthAuthorizeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'response_type': opts['responseType'],
        'client_id': clientId,
        'redirect_uri': redirectUri,
        'scope': opts['scope'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/v2/oauth/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizeV2OauthAuthorizeGet_0 operation.
     * @callback module:api/AuthApi~authorizeV2OauthAuthorizeGet_0Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize
     * Authorize an email address to use for authentication.
     * @param {String} clientId The client ID to use for authentication.
     * @param {String} redirectUri The redirect URI to use for authentication.
     * @param {Object} opts Optional parameters
     * @param {String} opts.responseType The type of response to return. (default to 'code')
     * @param {String} opts.scope The scope to use for authentication. (default to 'read_write')
     * @param {String} opts.state The state to use for authentication. (default to '')
     * @param {module:api/AuthApi~authorizeV2OauthAuthorizeGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    authorizeV2OauthAuthorizeGet_0(clientId, redirectUri, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorizeV2OauthAuthorizeGet_0");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorizeV2OauthAuthorizeGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'response_type': opts['responseType'],
        'client_id': clientId,
        'redirect_uri': redirectUri,
        'scope': opts['scope'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/v2/oauth/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUserV2UsersMeGet operation.
     * @callback module:api/AuthApi~getCurrentUserV2UsersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user
     * Get current user
     * @param {module:api/AuthApi~getCurrentUserV2UsersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getCurrentUserV2UsersMeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v2/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInfoV2OauthUserInfoGet operation.
     * @callback module:api/AuthApi~getUserInfoV2OauthUserInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user
     * Get current user
     * @param {module:api/AuthApi~getUserInfoV2OauthUserInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserInfoV2OauthUserInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v2/oauth/user_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginV2AuthLoginPost operation.
     * @callback module:api/AuthApi~loginV2AuthLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Request a one-time passcode to an email address.
     * @param {String} email 
     * @param {module:api/AuthApi~loginV2AuthLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    loginV2AuthLoginPost(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling loginV2AuthLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/v2/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginV2AuthLoginPost_0 operation.
     * @callback module:api/AuthApi~loginV2AuthLoginPost_0Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Request a one-time passcode to an email address.
     * @param {String} email 
     * @param {module:api/AuthApi~loginV2AuthLoginPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    loginV2AuthLoginPost_0(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling loginV2AuthLoginPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/v2/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerV2AuthRegisterPost operation.
     * @callback module:api/AuthApi~registerV2AuthRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register
     * Register a new user.
     * @param {String} body 
     * @param {module:api/AuthApi~registerV2AuthRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    registerV2AuthRegisterPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerV2AuthRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/v2/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerV2AuthRegisterPost_0 operation.
     * @callback module:api/AuthApi~registerV2AuthRegisterPost_0Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register
     * Register a new user.
     * @param {String} body 
     * @param {module:api/AuthApi~registerV2AuthRegisterPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    registerV2AuthRegisterPost_0(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerV2AuthRegisterPost_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/v2/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurrentUserV2UsersMePut operation.
     * @callback module:api/AuthApi~updateCurrentUserV2UsersMePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update current user
     * Update current user
     * @param {module:model/User1} user1 
     * @param {module:api/AuthApi~updateCurrentUserV2UsersMePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateCurrentUserV2UsersMePut(user1, callback) {
      let postBody = user1;
      // verify the required parameter 'user1' is set
      if (user1 === undefined || user1 === null) {
        throw new Error("Missing the required parameter 'user1' when calling updateCurrentUserV2UsersMePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v2/users/me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
