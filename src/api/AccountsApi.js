/**
 * Versify API
 * Versify API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import Account1 from '../model/Account1';
import Account2 from '../model/Account2';
import AccountMetrics from '../model/AccountMetrics';
import ApiDeleteResponse from '../model/ApiDeleteResponse';
import ApiListResponse from '../model/ApiListResponse';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Accounts service.
* @module api/AccountsApi
* @version 1.0.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccountV2AccountsPost operation.
     * @callback module:api/AccountsApi~createAccountV2AccountsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account
     * Create an account
     * @param {module:model/Account1} account1 
     * @param {module:api/AccountsApi~createAccountV2AccountsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    createAccountV2AccountsPost(account1, callback) {
      let postBody = account1;
      // verify the required parameter 'account1' is set
      if (account1 === undefined || account1 === null) {
        throw new Error("Missing the required parameter 'account1' when calling createAccountV2AccountsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/v2/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountV2AccountsAccountIdDelete operation.
     * @callback module:api/AccountsApi~deleteAccountV2AccountsAccountIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account
     * Delete an account by ID
     * @param {String} accountId Unique identifier of the account
     * @param {module:api/AccountsApi~deleteAccountV2AccountsAccountIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeleteResponse}
     */
    deleteAccountV2AccountsAccountIdDelete(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteAccountV2AccountsAccountIdDelete");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiDeleteResponse;
      return this.apiClient.callApi(
        '/v2/accounts/{account_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountMetricsV2AccountsAccountIdMetricsGet operation.
     * @callback module:api/AccountsApi~getAccountMetricsV2AccountsAccountIdMetricsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountMetrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account metrics
     * Get account metrics by ID
     * @param {String} accountId Unique identifier of the account
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.objectTypes Object types
     * @param {module:api/AccountsApi~getAccountMetricsV2AccountsAccountIdMetricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountMetrics}
     */
    getAccountMetricsV2AccountsAccountIdMetricsGet(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountMetricsV2AccountsAccountIdMetricsGet");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
        'object_types': this.apiClient.buildCollectionParam(opts['objectTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountMetrics;
      return this.apiClient.callApi(
        '/v2/accounts/{account_id}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountV2AccountsAccountIdGet operation.
     * @callback module:api/AccountsApi~getAccountV2AccountsAccountIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an account
     * Get an account by ID
     * @param {String} accountId Unique identifier of the account
     * @param {module:api/AccountsApi~getAccountV2AccountsAccountIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    getAccountV2AccountsAccountIdGet(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountV2AccountsAccountIdGet");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/v2/accounts/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountsV2AccountsGet operation.
     * @callback module:api/AccountsApi~listAccountsV2AccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accounts
     * List accounts with optional filters and pagination parameters
     * @param {module:api/AccountsApi~listAccountsV2AccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponse}
     */
    listAccountsV2AccountsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiListResponse;
      return this.apiClient.callApi(
        '/v2/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountV2AccountsAccountIdPut operation.
     * @callback module:api/AccountsApi~updateAccountV2AccountsAccountIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account
     * Update an account by ID
     * @param {String} accountId Unique identifier of the account
     * @param {module:model/Account2} account2 
     * @param {module:api/AccountsApi~updateAccountV2AccountsAccountIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    updateAccountV2AccountsAccountIdPut(accountId, account2, callback) {
      let postBody = account2;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAccountV2AccountsAccountIdPut");
      }
      // verify the required parameter 'account2' is set
      if (account2 === undefined || account2 === null) {
        throw new Error("Missing the required parameter 'account2' when calling updateAccountV2AccountsAccountIdPut");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/v2/accounts/{account_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
