/**
 * Versify API
 * Versify API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountStatus from './AccountStatus';
import App from './App';
import BillingSettings from './BillingSettings';
import BrandingSettings from './BrandingSettings';
import TeamMember from './TeamMember';

/**
 * The Account model module.
 * @module model/Account
 * @version 1.0.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * A account document in the database.
     * @alias module:model/Account
     * @param domain {String} The domain of the account
     * @param name {String} The name of the account
     */
    constructor(domain, name) { 
        
        Account.initialize(this, domain, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domain, name) { 
        obj['domain'] = domain;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('apps')) {
                obj['apps'] = ApiClient.convertToType(data['apps'], [App]);
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = BillingSettings.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = BrandingSettings.constructFromObject(data['brand']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('livemoed')) {
                obj['livemoed'] = ApiClient.convertToType(data['livemoed'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], AccountStatus);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], [TeamMember]);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        if (data['apps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['apps'])) {
                throw new Error("Expected the field `apps` to be an array in the JSON data but got " + data['apps']);
            }
            // validate the optional field `apps` (array)
            for (const item of data['apps']) {
                App.validateJsonObject(item);
            };
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          BillingSettings.validateJSON(data['billing']);
        }
        // validate the optional field `brand`
        if (data['brand']) { // data not null
          BrandingSettings.validateJSON(data['brand']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          AccountStatus.validateJSON(data['status']);
        }
        if (data['team']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['team'])) {
                throw new Error("Expected the field `team` to be an array in the JSON data but got " + data['team']);
            }
            // validate the optional field `team` (array)
            for (const item of data['team']) {
                TeamMember.validateJsonObject(item);
            };
        }

        return true;
    }


}

Account.RequiredProperties = ["domain", "name"];

/**
 * Unique identifier for the account
 * @member {String} _id
 */
Account.prototype['_id'] = undefined;

/**
 * The apps associated with the account
 * @member {Array.<module:model/App>} apps
 */
Account.prototype['apps'] = undefined;

/**
 * @member {module:model/BillingSettings} billing
 */
Account.prototype['billing'] = undefined;

/**
 * @member {module:model/BrandingSettings} brand
 */
Account.prototype['brand'] = undefined;

/**
 * The timestamp when the event was created
 * @member {Number} created
 */
Account.prototype['created'] = undefined;

/**
 * The domain of the account
 * @member {String} domain
 */
Account.prototype['domain'] = undefined;

/**
 * Whether the account is in live mode
 * @member {Boolean} livemoed
 * @default false
 */
Account.prototype['livemoed'] = false;

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Account.prototype['metadata'] = undefined;

/**
 * The name of the account
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * The object type
 * @member {String} object
 * @default 'account'
 */
Account.prototype['object'] = 'account';

/**
 * The status of the account
 * @member {module:model/AccountStatus} status
 */
Account.prototype['status'] = undefined;

/**
 * The team members and associated roles of the account
 * @member {Array.<module:model/TeamMember>} team
 */
Account.prototype['team'] = undefined;

/**
 * The timestamp when the event was last updated
 * @member {Number} updated
 */
Account.prototype['updated'] = undefined;






export default Account;

