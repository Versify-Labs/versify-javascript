/**
 * Versify API
 * Versify API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Operator from './Operator';
import QueryValue from './QueryValue';

/**
 * The Query model module.
 * @module model/Query
 * @version 1.0.0
 */
class Query {
    /**
     * Constructs a new <code>Query</code>.
     * A query that can be used to filter data.
     * @alias module:model/Query
     * @param operator {module:model/Operator} The operator to use
     * @param value {module:model/QueryValue} 
     */
    constructor(operator, value) { 
        
        Query.initialize(this, operator, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operator, value) { 
        obj['operator'] = operator;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query} obj Optional instance to populate.
     * @return {module:model/Query} The populated <code>Query</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query();

            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], Operator);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = QueryValue.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Query.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // validate the optional field `operator`
        if (data['operator']) { // data not null
          Operator.validateJSON(data['operator']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          QueryValue.validateJSON(data['value']);
        }

        return true;
    }


}

Query.RequiredProperties = ["operator", "value"];

/**
 * The field to query the data on
 * @member {String} field
 */
Query.prototype['field'] = undefined;

/**
 * The operator to use
 * @member {module:model/Operator} operator
 */
Query.prototype['operator'] = undefined;

/**
 * @member {module:model/QueryValue} value
 */
Query.prototype['value'] = undefined;






export default Query;

