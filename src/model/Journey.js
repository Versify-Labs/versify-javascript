/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import Trigger1 from './Trigger1';

/**
 * The Journey model module.
 * @module model/Journey
 * @version 1.0.0
 */
class Journey {
    /**
     * Constructs a new <code>Journey</code>.
     * A journey document in the database.
     * @alias module:model/Journey
     * @param account {String} The account the journey belongs to
     * @param name {String} The name of the journey. Internal facing.
     * @param trigger {module:model/Trigger1} 
     */
    constructor(account, name, trigger) { 
        
        Journey.initialize(this, account, name, trigger);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, name, trigger) { 
        obj['account'] = account;
        obj['name'] = name;
        obj['trigger'] = trigger;
    }

    /**
     * Constructs a <code>Journey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Journey} obj Optional instance to populate.
     * @return {module:model/Journey} The populated <code>Journey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Journey();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
            if (data.hasOwnProperty('states')) {
                obj['states'] = ApiClient.convertToType(data['states'], {'String': Action});
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = Trigger1.constructFromObject(data['trigger']);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Journey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Journey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Journey.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          Trigger1.validateJSON(data['trigger']);
        }

        return true;
    }


}

Journey.RequiredProperties = ["account", "name", "trigger"];

/**
 * Unique identifier for the journey
 * @member {String} _id
 */
Journey.prototype['_id'] = undefined;

/**
 * The account the journey belongs to
 * @member {String} account
 */
Journey.prototype['account'] = undefined;

/**
 * Whether the journey is active
 * @member {Boolean} active
 * @default true
 */
Journey.prototype['active'] = true;

/**
 * The timestamp when the event was created
 * @member {Number} created
 */
Journey.prototype['created'] = undefined;

/**
 * A description of the journey
 * @member {String} description
 * @default ''
 */
Journey.prototype['description'] = '';

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Journey.prototype['metadata'] = undefined;

/**
 * The name of the journey. Internal facing.
 * @member {String} name
 */
Journey.prototype['name'] = undefined;

/**
 * The object type. Always \"journey\"
 * @member {String} object
 * @default 'journey'
 */
Journey.prototype['object'] = 'journey';

/**
 * The starting state of the journey
 * @member {String} start
 * @default 'start'
 */
Journey.prototype['start'] = 'start';

/**
 * The states of the journey
 * @member {Object.<String, module:model/Action>} states
 */
Journey.prototype['states'] = undefined;

/**
 * @member {module:model/Trigger1} trigger
 */
Journey.prototype['trigger'] = undefined;

/**
 * The timestamp when the event was last updated
 * @member {Number} updated
 */
Journey.prototype['updated'] = undefined;






export default Journey;

