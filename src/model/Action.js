/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionConfiguration from './ActionConfiguration';
import ActionType from './ActionType';

/**
 * The Action model module.
 * @module model/Action
 * @version 1.0.0
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * An action for a journey.
     * @alias module:model/Action
     * @param actionType {module:model/ActionType} The type of action
     * @param config {module:model/ActionConfiguration} 
     */
    constructor(actionType, config) { 
        
        Action.initialize(this, actionType, config);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionType, config) { 
        obj['action_type'] = actionType;
        obj['config'] = config;
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('action_type')) {
                obj['action_type'] = ApiClient.convertToType(data['action_type'], ActionType);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ActionConfiguration.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Boolean');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Action.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `action_type`
        if (data['action_type']) { // data not null
          ActionType.validateJSON(data['action_type']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          ActionConfiguration.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }

        return true;
    }


}

Action.RequiredProperties = ["action_type", "config"];

/**
 * The type of action
 * @member {module:model/ActionType} action_type
 */
Action.prototype['action_type'] = undefined;

/**
 * A comment for the action
 * @member {String} comment
 */
Action.prototype['comment'] = undefined;

/**
 * @member {module:model/ActionConfiguration} config
 */
Action.prototype['config'] = undefined;

/**
 * Whether the action ends the journey
 * @member {Boolean} end
 */
Action.prototype['end'] = undefined;

/**
 * The next action to run
 * @member {String} next
 */
Action.prototype['next'] = undefined;






export default Action;

