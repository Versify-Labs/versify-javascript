/**
 * Versify API
 * Versify API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockchainType from './BlockchainType';
import CollectionStatus from './CollectionStatus';

/**
 * The Collection model module.
 * @module model/Collection
 * @version 1.0.0
 */
class Collection {
    /**
     * Constructs a new <code>Collection</code>.
     * A collection document in the database.
     * @alias module:model/Collection
     * @param account {String} The account the collection belongs to
     * @param name {String} The name of the collection
     */
    constructor(account, name) { 
        
        Collection.initialize(this, account, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, name) { 
        obj['account'] = account;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Collection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Collection} obj Optional instance to populate.
     * @return {module:model/Collection} The populated <code>Collection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Collection();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('blockchain')) {
                obj['blockchain'] = ApiClient.convertToType(data['blockchain'], BlockchainType);
            }
            if (data.hasOwnProperty('contract_address')) {
                obj['contract_address'] = ApiClient.convertToType(data['contract_address'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], CollectionStatus);
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Collection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Collection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Collection.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // validate the optional field `blockchain`
        if (data['blockchain']) { // data not null
          BlockchainType.validateJSON(data['blockchain']);
        }
        // ensure the json data is a string
        if (data['contract_address'] && !(typeof data['contract_address'] === 'string' || data['contract_address'] instanceof String)) {
            throw new Error("Expected the field `contract_address` to be a primitive type in the JSON string but got " + data['contract_address']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          CollectionStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['transaction'] && !(typeof data['transaction'] === 'string' || data['transaction'] instanceof String)) {
            throw new Error("Expected the field `transaction` to be a primitive type in the JSON string but got " + data['transaction']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

Collection.RequiredProperties = ["account", "name"];

/**
 * Unique identifier for the collection
 * @member {String} _id
 */
Collection.prototype['_id'] = undefined;

/**
 * The account the collection belongs to
 * @member {String} account
 */
Collection.prototype['account'] = undefined;

/**
 * Whether the asset is currently available or not.
 * @member {Boolean} active
 * @default true
 */
Collection.prototype['active'] = true;

/**
 * The blockchain the collection is on
 * @member {module:model/BlockchainType} blockchain
 */
Collection.prototype['blockchain'] = undefined;

/**
 * The address of the contract
 * @member {String} contract_address
 */
Collection.prototype['contract_address'] = undefined;

/**
 * The timestamp when the event was created
 * @member {Number} created
 */
Collection.prototype['created'] = undefined;

/**
 * Whether this is the default collection for the account
 * @member {Boolean} default
 * @default false
 */
Collection.prototype['default'] = false;

/**
 * The description of the collection
 * @member {String} description
 */
Collection.prototype['description'] = undefined;

/**
 * The image of the collection
 * @member {String} image
 * @default 'https://cdn.versifylabs.com/branding/Logos/verisify-logo-transparent-bg.png'
 */
Collection.prototype['image'] = 'https://cdn.versifylabs.com/branding/Logos/verisify-logo-transparent-bg.png';

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Collection.prototype['metadata'] = undefined;

/**
 * The name of the collection
 * @member {String} name
 */
Collection.prototype['name'] = undefined;

/**
 * The object type. Always \"collection\"
 * @member {String} object
 * @default 'collection'
 */
Collection.prototype['object'] = 'collection';

/**
 * The signature of the collection
 * @member {String} signature
 */
Collection.prototype['signature'] = undefined;

/**
 * The status of the collection
 * @member {module:model/CollectionStatus} status
 */
Collection.prototype['status'] = undefined;

/**
 * The transaction of the collection
 * @member {String} transaction
 */
Collection.prototype['transaction'] = undefined;

/**
 * The timestamp when the event was last updated
 * @member {Number} updated
 */
Collection.prototype['updated'] = undefined;

/**
 * The uri of the collection
 * @member {String} uri
 */
Collection.prototype['uri'] = undefined;






export default Collection;

