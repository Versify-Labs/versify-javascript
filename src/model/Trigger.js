/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TriggerConfiguration from './TriggerConfiguration';
import TriggerType from './TriggerType';

/**
 * The Trigger model module.
 * @module model/Trigger
 * @version 1.0.0
 */
class Trigger {
    /**
     * Constructs a new <code>Trigger</code>.
     * A trigger for a journey.
     * @alias module:model/Trigger
     * @param config {module:model/TriggerConfiguration} 
     * @param triggerType {module:model/TriggerType} The type of trigger
     */
    constructor(config, triggerType) { 
        
        Trigger.initialize(this, config, triggerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, config, triggerType) { 
        obj['config'] = config;
        obj['trigger_type'] = triggerType;
    }

    /**
     * Constructs a <code>Trigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trigger} obj Optional instance to populate.
     * @return {module:model/Trigger} The populated <code>Trigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trigger();

            if (data.hasOwnProperty('config')) {
                obj['config'] = TriggerConfiguration.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('trigger_type')) {
                obj['trigger_type'] = ApiClient.convertToType(data['trigger_type'], TriggerType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trigger</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Trigger.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          TriggerConfiguration.validateJSON(data['config']);
        }
        // validate the optional field `trigger_type`
        if (data['trigger_type']) { // data not null
          TriggerType.validateJSON(data['trigger_type']);
        }

        return true;
    }


}

Trigger.RequiredProperties = ["config", "trigger_type"];

/**
 * @member {module:model/TriggerConfiguration} config
 */
Trigger.prototype['config'] = undefined;

/**
 * The type of trigger
 * @member {module:model/TriggerType} trigger_type
 */
Trigger.prototype['trigger_type'] = undefined;






export default Trigger;

