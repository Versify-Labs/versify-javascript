/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Claim model module.
 * @module model/Claim
 * @version 1.0.0
 */
class Claim {
    /**
     * Constructs a new <code>Claim</code>.
     * A claim document in the database.
     * @alias module:model/Claim
     * @param account {String} The account the claim belongs to
     * @param asset {String} The asset being claimed
     * @param code {String} The code used to submit the claim.
     */
    constructor(account, asset, code) { 
        
        Claim.initialize(this, account, asset, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, asset, code) { 
        obj['account'] = account;
        obj['asset'] = asset;
        obj['code'] = code;
    }

    /**
     * Constructs a <code>Claim</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Claim} obj Optional instance to populate.
     * @return {module:model/Claim} The populated <code>Claim</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Claim();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('asset')) {
                obj['asset'] = ApiClient.convertToType(data['asset'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Claim</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Claim</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Claim.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['asset'] && !(typeof data['asset'] === 'string' || data['asset'] instanceof String)) {
            throw new Error("Expected the field `asset` to be a primitive type in the JSON string but got " + data['asset']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Claim.RequiredProperties = ["account", "asset", "code"];

/**
 * Unique identifier for the claim
 * @member {String} _id
 */
Claim.prototype['_id'] = undefined;

/**
 * The account the claim belongs to
 * @member {String} account
 */
Claim.prototype['account'] = undefined;

/**
 * The asset being claimed
 * @member {String} asset
 */
Claim.prototype['asset'] = undefined;

/**
 * The code used to submit the claim.
 * @member {String} code
 */
Claim.prototype['code'] = undefined;

/**
 * The timestamp when the event was created
 * @member {Number} created
 */
Claim.prototype['created'] = undefined;

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Claim.prototype['metadata'] = undefined;

/**
 * The object type. Always \"claim\"
 * @member {String} object
 * @default 'claim'
 */
Claim.prototype['object'] = 'claim';

/**
 * The number of assets being claimed
 * @member {Number} quantity
 * @default 1
 */
Claim.prototype['quantity'] = 1;

/**
 * The status of the claim
 * @member {String} status
 * @default 'requested'
 */
Claim.prototype['status'] = 'requested';

/**
 * The timestamp when the event was last updated
 * @member {Number} updated
 */
Claim.prototype['updated'] = undefined;






export default Claim;

