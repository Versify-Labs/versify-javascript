/**
 * Versify API
 * Versify API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address2 from './Address2';
import Name2 from './Name2';
import SocialProfile from './SocialProfile';

/**
 * The ContactUpdate model module.
 * @module model/ContactUpdate
 * @version 1.0.0
 */
class ContactUpdate {
    /**
     * Constructs a new <code>ContactUpdate</code>.
     * A contact update request body.
     * @alias module:model/ContactUpdate
     */
    constructor() { 
        
        ContactUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactUpdate} obj Optional instance to populate.
     * @return {module:model/ContactUpdate} The populated <code>ContactUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactUpdate();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address2.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name2.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('social_profiles')) {
                obj['social_profiles'] = ApiClient.convertToType(data['social_profiles'], [SocialProfile]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactUpdate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address2.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name2.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        if (data['social_profiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['social_profiles'])) {
                throw new Error("Expected the field `social_profiles` to be an array in the JSON data but got " + data['social_profiles']);
            }
            // validate the optional field `social_profiles` (array)
            for (const item of data['social_profiles']) {
                SocialProfile.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * Whether the contact is currently available or not.
 * @member {Boolean} active
 */
ContactUpdate.prototype['active'] = undefined;

/**
 * @member {module:model/Address2} address
 */
ContactUpdate.prototype['address'] = undefined;

/**
 * The URL of the contact's avatar
 * @member {String} avatar
 */
ContactUpdate.prototype['avatar'] = undefined;

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
ContactUpdate.prototype['metadata'] = undefined;

/**
 * @member {module:model/Name2} name
 */
ContactUpdate.prototype['name'] = undefined;

/**
 * The ID of the admin user who manages the relationship with the contact
 * @member {String} owner
 */
ContactUpdate.prototype['owner'] = undefined;

/**
 * The phone number of the contact
 * @member {String} phone_number
 */
ContactUpdate.prototype['phone_number'] = undefined;

/**
 * The social profiles associated with the contact
 * @member {Array.<module:model/SocialProfile>} social_profiles
 */
ContactUpdate.prototype['social_profiles'] = undefined;






export default ContactUpdate;

