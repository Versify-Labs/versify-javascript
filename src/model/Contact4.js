/**
 * Versify API
 * Versify API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactUpdate from './ContactUpdate';
import Name2 from './Name2';

/**
 * The Contact4 model module.
 * @module model/Contact4
 * @version 1.0.0
 */
class Contact4 {
    /**
     * Constructs a new <code>Contact4</code>.
     * Contact to update
     * @alias module:model/Contact4
     * @implements module:model/ContactUpdate
     */
    constructor() { 
        ContactUpdate.initialize(this);
        Contact4.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contact4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contact4} obj Optional instance to populate.
     * @return {module:model/Contact4} The populated <code>Contact4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact4();
            ContactUpdate.constructFromObject(data, obj);

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name2.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact4</code>.
     */
    static validateJSON(data) {
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name2.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }

        return true;
    }


}



/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Contact4.prototype['metadata'] = undefined;

/**
 * @member {module:model/Name2} name
 */
Contact4.prototype['name'] = undefined;

/**
 * The phone number of the contact
 * @member {String} phone_number
 */
Contact4.prototype['phone_number'] = undefined;


// Implement ContactUpdate interface:
/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
ContactUpdate.prototype['metadata'] = undefined;
/**
 * @member {module:model/Name2} name
 */
ContactUpdate.prototype['name'] = undefined;
/**
 * The phone number of the contact
 * @member {String} phone_number
 */
ContactUpdate.prototype['phone_number'] = undefined;




export default Contact4;

