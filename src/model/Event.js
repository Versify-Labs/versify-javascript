/**
 * Versify API
 * Versify API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.0.0
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * An event document in the database.
     * @alias module:model/Event
     * @param account {String} The account the event belongs to
     * @param detailType {String} The type of event. For example, order.placed.
     */
    constructor(account, detailType) { 
        
        Event.initialize(this, account, detailType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, detailType) { 
        obj['account'] = account;
        obj['detail_type'] = detailType;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], Object);
            }
            if (data.hasOwnProperty('detail_type')) {
                obj['detail_type'] = ApiClient.convertToType(data['detail_type'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['contact'] && !(typeof data['contact'] === 'string' || data['contact'] instanceof String)) {
            throw new Error("Expected the field `contact` to be a primitive type in the JSON string but got " + data['contact']);
        }
        // ensure the json data is a string
        if (data['detail_type'] && !(typeof data['detail_type'] === 'string' || data['detail_type'] instanceof String)) {
            throw new Error("Expected the field `detail_type` to be a primitive type in the JSON string but got " + data['detail_type']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

Event.RequiredProperties = ["account", "detail_type"];

/**
 * Unique identifier for the event
 * @member {String} _id
 */
Event.prototype['_id'] = undefined;

/**
 * The account the event belongs to
 * @member {String} account
 */
Event.prototype['account'] = undefined;

/**
 * The contact the event is for
 * @member {String} contact
 */
Event.prototype['contact'] = undefined;

/**
 * The timestamp when the event was created
 * @member {Number} created
 */
Event.prototype['created'] = undefined;

/**
 * Arbitrary metadata associated with the event
 * @member {Object} detail
 */
Event.prototype['detail'] = undefined;

/**
 * The type of event. For example, order.placed.
 * @member {String} detail_type
 */
Event.prototype['detail_type'] = undefined;

/**
 * Arbitrary metadata associated with the object
 * @member {Object} metadata
 */
Event.prototype['metadata'] = undefined;

/**
 * The object type. Always \"event\"
 * @member {String} object
 * @default 'event'
 */
Event.prototype['object'] = 'event';

/**
 * The source of the event
 * @member {String} source
 * @default 'versify'
 */
Event.prototype['source'] = 'versify';

/**
 * The timestamp when the event was last updated
 * @member {Number} updated
 */
Event.prototype['updated'] = undefined;






export default Event;

